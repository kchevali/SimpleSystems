Machine Code Language
====================================================
32 bit data

Control: 16 bit
Addressing: 16 bits (supports 65k RAM)
Data: 32 bits

====================================================
32 Bit Instruction (Address + Control):  AAAAAAAA AAAAAAAA HHHBBB-- --------
====================================================

HALT: 00000000 00000000

Input(HHH)
isPC[15]
isCPU[14]
isM[13]

Output Bus(BBB)
isDataBus[12]
isAddressBus[11]
isControlBus[10]

PC
RESET - all 0s
LOAD[1]
CONST/INC[2]
JMP[4]
JNZ[5]
JLT[6]
JGT[7]
JLE[8]
JGE[9]

CPU
RESET - all 0s
DEST A[0]=0
DEST B[0]=1

LOAD[1]
INC[2]
MOVE[3]



&[4]=0, [5]=1
|[4]=0, [6]=1
^[4]=0, [7]=1
~[4]=0, [8]=1

+[4]=1, [5]=1
-[4]=1, [6]=1
*[4]=1, [7]=1
/[4]=1, [8]=1

RAM
LOAD[0]
CONST[1]

====================================================
Instruction Specification
====================================================

Controller Loop
    CONTROLLER -> INST BUS
    READ PC -> ADDR BUS
    CONTROLLER -> INST BUS
    READ M  -> ADDR BUS + INST BUS
    EXEC
    CONTROLLER -> INST BUS
    INC PC -> NONE


Read M:
    ADDR Bus = A
    READ M -> DATA Bus

====================================================
Data Types(32 bits)
====================================================

00 - SIGNED INTEGER
01 - UNSIGNED INTEGER
10 - CHAR
11 - DOUBLE

====================================================
Examples
====================================================


Load CONST:
----------

LOAD CONST
    Hardware: PC, MEM, Out: Address, Data, Code: INC, CONST
    00000000 00000000 10111000 00000100
    101
DATA BUS -> A
    ADDR: None, Output: None, Dest: A, Code: Load
    00000000 00000000 00000001 00010100 

ADD B = B + A
    ADDR: None, Output: None, Dest: B, Code:Add
    00000000 00000000 00000010 00000100

MOVE A -> B:
----------
    ADDR: None, Output: None, Dest:B, Code

JUMP ADDR IF A > B
----------
A > B to A
READ A to Data
JNZ (PC will)
00000000 00000000 10000110 00001101
00000000 00001000 10000000 00010011


Brainstorm
load constant to A
move data between A/B/M
push/pop M <-> A/B
& | ^ && || + - * / between A/B and save to A
! ~ >> << A
> < >= <= == != between A/B and save to A
jump to instruction

RA WB
RA WM

====================================================
Hardware Specification
====================================================

PC Functions
Reset
Load
Increment
Read

Processor Functions
Read/Load AB
Run operation on A to B


